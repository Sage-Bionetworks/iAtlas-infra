AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  HostedZone:
    Type: String
    Description: The hosted zone in Route 53 for the Load balancer.
  SubDomainName:
    Default: '*'
    Description: Sub domain (default is '*') (i.e. "api" of api.cri-iatlas.org)
    Type: String
  DomainName:
    Description: The domain name (i.e. sagebionetworks.org)
    Type: String
  CertificateArn:
    Type: String
    Description: ARN of the Certificate.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: A VPC to run ECS instances in.
  BastionHostSgId:
    Type: String
    Description: The ID of the security group for bastion hosts
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnet IDs from the VPC for ALB placement. Minimum of two.
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnet IDs from the VPC for ECS node placement. Minimum of two.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '1'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  MinSize:
    Type: Number
    Default: '1'
    Description: Minimum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3a.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
    ConstraintDescription: Please choose a valid instance type.
  DockerImageTag:
    Type: String
    Description: The Docker image to run from registry registry.gitlab.com/cri-iatlas/iatlas-api
  # See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/retrieve-ecs-optimized_AMI.html
  LatestEcsAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'
    Description: A reference to the latest ECS Optimized AMI Id.
  FlaskEnv:
    Type: String
    Description: The environment that the Flask application is running in. Valid values are `production`, `staging`, `development`, or `test`.
    Default: 'production'
    AllowedValues:
      - test
      - development
      - staging
      - production
  DbHost:
    Type: String
    Description: The reader endpoint for the DB cluster. For example - mystack-mydbcluster-ro-123456789012.us-east-2.rds.amazonaws.com
    NoEcho: true
  DbPort:
    Type: Number
    Description: The port of the DB cluster.
    Default: 5432
    NoEcho: true
  DbAccessSecurityGroup:
    Type: String
    Description: The DB Security Group.
  DbCredsArn:
    Description: The ARN of the Database secret in the Secret Manager
    NoEcho: 'true'
    Type: String
  KmsKeyArn:
    Description: 'Encryption key ARN to use for storage'
    Type: String
Resources:
  ########################
  ### Managed Policies ###
  ########################
  # This is necessary so it can read the Secrets Manager entry that contains the external registry credentials.
  AccessSecretPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - kms:Decrypt
              - secretsmanager:GetSecretValue
              - ssm:GetParameters
            Resource:
              - !Ref 'KmsKeyArn'
              - !Ref 'DbCredsArn'
              - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:iatlas_gitlab_registry_creds-??????'
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
          - Effect: Allow
            Action:
              - logs:CreateLogStream
            Resource: '*'
  EcsServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
              - 'ec2:Describe*'
              - 'ec2:AuthorizeSecurityGroupIngress'
            Resource: '*'
  Ec2Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'
  AutoScalingServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'

  #############
  ### Roles ###
  #############
  # iAtlas API task execution IAM role
  IAtlasIAMExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref 'AccessSecretPolicy'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  EcsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - !Ref EcsServicePolicy
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref Ec2Policy
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref AutoScalingServicePolicy
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /

  ##############
  ### Groups ###
  ##############
  # Security group for ECS nodes
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Node Security Group
      VpcId: !Ref 'VpcId'
  # Should allow ephemeral ports from the ALB SG
  EcsSecurityGroupAlbPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref 'EcsAlbSecurityGroup'
  # Should allow SSH from the Bastion hosts security group
  EcsSecurityGroupSSHfromBastion:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref 'BastionHostSgId'
  # Security group for the ALB that goes in front
  EcsAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer for ECS security group
      VpcId: !Ref 'VpcId'
  EcsAlbSecurityGroupHttpsInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsAlbSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'EcsLogGroup-${AWS::StackName}'
      RetentionInDays: 14
  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'PrivateSubnetIds'
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: !Ref 'MinSize'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  EcsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: EcsAlb
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: EcsTargetGroup
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VpcId'

  # The 'Family' property is key here, it tells ECS to increment the version rather than create a new Task Definition
  TaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'AWS::StackName'
      ExecutionRoleArn: !GetAtt ['IAtlasIAMExecutionRole', 'Arn']
      ContainerDefinitions:
        - Name: iatlas-api
          Cpu: 100
          Essential: true
          Image: !Sub 'registry.gitlab.com/cri-iatlas/iatlas-api:${DockerImageTag}'
          RepositoryCredentials:
            CredentialsParameter: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:iatlas_gitlab_registry_creds'
          Memory: 300
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: iatlas-api
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: FLASK_ENV
              Value: !Ref 'FlaskEnv'
            - Name: POSTGRES_HOST
              Value: !Ref 'DbHost'
            - Name: POSTGRES_PORT
              Value: !Ref 'DbPort'
          Secrets:
            - Name: POSTGRES_DB
              ValueFrom: !Sub '${DbCredsArn}:db_name::'
            - Name: POSTGRES_USER
              ValueFrom: !Sub '${DbCredsArn}:username::'
            - Name: POSTGRES_PASSWORD
              ValueFrom: !Sub '${DbCredsArn}:password::'

  EcsCluster:
    Type: AWS::ECS::Cluster

  ListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      ListenerArn: !Ref AlbHttpsListener

  # ALB Load Balancer
  EcsAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: !Ref 'PublicSubnetIds'
      SecurityGroups: [!Ref 'EcsAlbSecurityGroup']
  # The LoadBalancer listener for HTTP redirects to HTTPS.
  AlbHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: EcsServiceRole
    Properties:
      DefaultActions:
        - Order: 1
          Type: 'redirect'
          RedirectConfig:
            Protocol: 'HTTPS'
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: 'HTTP_301'
      LoadBalancerArn: !Ref 'EcsAlb'
      Port: 80
      Protocol: 'HTTP'
  # The HTTPS loadBalancer listener does the actual forwarding.
  AlbHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: EcsServiceRole
    Properties:
      DefaultActions:
        - Order: 1
          Type: 'forward'
          TargetGroupArn: !Ref 'EcsTargetGroup'
      LoadBalancerArn: !Ref 'EcsAlb'
      Port: 443
      Protocol: 'HTTPS'
      SslPolicy: 'ELBSecurityPolicy-2016-08'
      Certificates:
        - CertificateArn: !Ref CertificateArn
  # Associate the domain name with the loadBalancer.
  iAtlasDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZone
      Comment: Zone apex alias targeted to EcsAlb LoadBalancer.
      RecordSets:
        - Name: !Sub '${SubDomainName}.${DomainName}'
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt 'EcsAlb.CanonicalHostedZoneID'
            DNSName: !GetAtt 'EcsAlb.DNSName'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'LatestEcsAmiId'
      SecurityGroups:
        - !Ref 'EcsSecurityGroup'
        - !Ref 'DbAccessSecurityGroup'
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !Ref 'KeyName'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
          echo ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE=true >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EcsAutoScalingGroup --region ${AWS::Region}
  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - AlbHttpListener
      - AlbHttpsListener
    Properties:
      Cluster: !Ref 'EcsCluster'
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: iatlas-api
          ContainerPort: 80
          TargetGroupArn: !Ref 'EcsTargetGroup'
      Role: !Ref 'EcsServiceRole'
      TaskDefinition: !Ref 'TaskDef'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']
Outputs:
  EcsService:
    Value: !Ref 'EcsService'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EcsService'
  EcsCluster:
    Value: !Ref 'EcsCluster'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EcsCluster'
  EcsAlb:
    Description: Your ALB DNS URL
    Value: !GetAtt 'EcsAlb.DNSName'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EcsAlb'
  TaskDef:
    Value: !Ref 'TaskDef'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-TaskDef'
